{"version":3,"sources":["store/reducers/calendar/types.tsx","hooks/useTypeSelector.tsx","api/CalendarService.tsx","store/reducers/calendar/calendarActionCreators.tsx","store/reducers/AllActionsCreators.tsx","pages/eventCalendar.tsx","hooks/useActions.tsx","utls/formatDate.tsx","App.tsx","store/reducers/calendar/index.tsx","store/reducers/index.tsx","store/index.tsx","index.tsx"],"names":["CalendarActionsEnum","useTypeSelector","useSelector","instance","axios","create","baseURL","CalendarService","get","CalendarActionCreators","setEvents","events","type","SET_EVENTS","payload","setIsLoading","isLoading","SET_IS_LOADING","setNearestTournament","event","SET_NEAREST_TOURNAMENT","fetchEvents","dispatch","a","getEvents","response","data","nearest_tournament","console","error","AllActionsCreators","EventCalendar","state","calendar","nearestTournament","useState","isVisible","setIsVisible","chosenEvent","setChosenEvent","useDispatch","bindActionCreators","useActions","useEffect","handleOk","className","message","description","competition","date_start","fullscreen","dateCellRender","value","formatedDate","date","year","getFullYear","month","getMonth","day","getDate","formatDate","toDate","currentDayEvents","filter","item","length","onClick","e","id","currentTarget","getAttribute","find","showModal","title","footer","visible","onOk","onCancel","column","Item","label","city","status","date_finish","regulation","target","href","justify","App","Content","initialState","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"mJASYA,E,8GCNCC,EAAmDC,I,kDDMpDF,K,wBAAAA,E,gCAAAA,E,iDAAAA,M,kCENNG,E,OAAWC,EAAMC,OAAO,CAE1BC,QAAS,uCAGAC,EAAb,qIACI,uGACWJ,EAASK,IAAsB,cAD1C,2CADJ,6DCHaC,EAAyB,CAClCC,UAAW,SAACC,GAAD,MAAuC,CAACC,KAAMZ,EAAoBa,WAAYC,QAASH,IAClGI,aAAc,SAACC,GAAD,MAAyC,CACnDJ,KAAMZ,EAAoBiB,eAC1BH,QAASE,IAEbE,qBAAsB,SAACC,GAAD,MAAoC,CACtDP,KAAMZ,EAAoBoB,uBAC1BN,QAASK,IAEbE,YAAa,yDAAM,WAAOC,GAAP,iBAAAC,EAAA,sEAEXD,EAASb,EAAuBM,cAAa,IAFlC,SAGYR,EAAgBiB,YAH5B,OAGLC,EAHK,OAILd,EAASc,EAASC,KAAKf,OAC7BW,EAASb,EAAuBC,UAAUC,IACtCc,EAASC,KAAKC,oBACdL,EAASb,EAAuBS,qBAAqBO,EAASC,KAAKC,qBAEvEL,EAASb,EAAuBM,cAAa,IATlC,kDAYXa,QAAQC,MAAR,MAZW,0DAAN,wDCZJC,EAAkB,eACxBrB,G,QCiFQsB,EA7EW,WACtB,MAA+C9B,GAAgB,SAAA+B,GAAK,OAAIA,EAAMC,YAAvEtB,EAAP,EAAOA,OAAQK,EAAf,EAAeA,UAAWkB,EAA1B,EAA0BA,kBAC1B,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACOlB,ECPe,WACtB,IAAMC,EAAWkB,cACjB,OAAOC,YAAmBX,EAAoBR,GDKxBoB,GAAfrB,YAEPsB,qBAAU,WACNtB,MACD,IAEH,IAOMuB,EAAW,WACbP,GAAa,IAoBjB,OACI,mCAAGrB,EACC,qBAAK6B,UAAU,UAAf,SACI,cAAC,IAAD,MAEJ,qCACKX,GACD,cAAC,IAAD,CACIY,QAAQ,8FACRC,YAAW,UAAKb,EAAkBc,YAAvB,sCAA4Cd,EAAkBe,YACzErC,KAAK,SAGT,cAAC,IAAD,CAAUsC,YAAY,EAAOC,eA1BzC,SAAwBC,GACpB,IAAMC,EEhCY,SAACC,GACvB,IAAMC,EAAOD,EAAKE,cACZC,EAAQH,EAAKI,WAAa,GAAlB,WAA2BJ,EAAKI,WAAa,GAAMJ,EAAKI,WAAa,EAC7EC,EAAML,EAAKM,UAAY,GAAjB,WAA0BN,EAAKM,WAAcN,EAAKM,UAC9D,MAAM,GAAN,OAAUD,EAAV,YAAiBF,EAAjB,YAA0BF,GF4BDM,CAAWT,EAAMU,UAChCC,EAAmBpD,EAAOqD,QAAO,SAAAC,GAAI,OAAIA,EAAKhB,aAAeI,KACnE,OAAIU,EAAiBG,OAAS,EAEtB,qBAAKC,QAAS,SAAAC,GAAC,OApBT,SAACA,GACf,IAAMC,EAAKD,EAAEE,cAAcC,aAAa,WAClCpD,EAAQR,EAAO6D,MAAK,SAAAP,GAAI,OAAIA,EAAKI,MAAQA,KAC/C9B,EAAepB,GACfkB,GAAa,GAgBcoC,CAAUL,IACxB,UAASL,EAAiB,GAAGM,GAC7BxB,UAAU,4CAGhB,gCAkBC,eAAC,IAAD,CAAO6B,MAAK,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAAaU,YAAa2B,OAAQ,KAAMC,QAASxC,EAAWyC,KAAMjC,EACzEkC,SAjCE,WACjBzC,GAAa,IA+BL,UAEI,eAAC,IAAD,CAAc0C,OAAQ,EAAtB,UACI,cAAC,IAAaC,KAAd,CAAmBC,MAAM,iCAAzB,gBAAkC3C,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAa4C,QACnC,OAAX5C,QAAW,IAAXA,OAAA,EAAAA,EAAa6C,SACd,cAAC,IAAaH,KAAd,CAAmBC,MAAM,gHAAzB,SAAgD3C,EAAY6C,SAE5D,cAAC,IAAaH,KAAd,CAAmBC,MAAM,gEAAzB,gBAAwC3C,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAaW,aACrD,cAAC,IAAa+B,KAAd,CAAmBC,MAAM,kFAAzB,gBAA2C3C,QAA3C,IAA2CA,OAA3C,EAA2CA,EAAa8C,eAC5C,OAAX9C,QAAW,IAAXA,OAAA,EAAAA,EAAa+C,aAAc,cAAC,IAAaL,KAAd,CAAmBC,MAAM,yDAAzB,SACxB,mBAAGK,OAAO,SAASC,KAAMjD,EAAY+C,WAArC,yEAIR,cAAC,IAAD,CAAKG,QAAQ,MAAb,SACI,cAAC,IAAD,CAAQrB,QAASvB,EAAUhC,KAAK,UAAhC,2B,SG7DT6E,EAVC,WACd,OACE,cAAC,IAAD,UACI,cAAC,IAAOC,QAAR,UACI,cAAC,EAAD,S,SCPNC,EAA8B,CAChChF,OAAQ,GACRK,WAAW,GCFA,GACXiB,SDIW,WAAwE,IAA9DD,EAA6D,uDAArD2D,EAAcC,EAAuC,uCAClF,OAAQA,EAAOhF,MACX,KAAKZ,EAAoBa,WACrB,OAAO,2BAAImB,GAAX,IAAkBrB,OAAQiF,EAAO9E,UACrC,KAAKd,EAAoBiB,eACrB,OAAO,2BAAIe,GAAX,IAAkBhB,UAAW4E,EAAO9E,UACxC,KAAKd,EAAoBoB,uBACrB,OAAO,2BAAIY,GAAX,IAAkBE,kBAAmB0D,EAAO9E,UAChD,QACI,OAAOkB,K,SEXb6D,EAAcC,YAAgBC,GAEvBC,EAAQC,YAAYJ,EAAaK,YAAgBC,MCA9DC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGVM,SAASC,eAAe,W","file":"static/js/main.714967ce.chunk.js","sourcesContent":["import {IEvent} from \"../../../models/eventModel\";\n\n\nexport interface CalendarState {\n    events: IEvent[],\n    isLoading: boolean,\n    nearestTournament?: IEvent,\n}\n\nexport enum CalendarActionsEnum {\n    SET_EVENTS = 'SET_EVENTS',\n    SET_IS_LOADING = 'SET_IS_LOADING',\n    SET_NEAREST_TOURNAMENT = 'SET_NEAREST_TOURNAMENT',\n}\n\nexport interface setEventsAction {\n    type: CalendarActionsEnum.SET_EVENTS,\n    payload: IEvent[],\n}\n\nexport interface setIsLoadingAction {\n    type: CalendarActionsEnum.SET_IS_LOADING,\n    payload: boolean\n}\n\nexport interface setNearestTournamentAction {\n    type: CalendarActionsEnum.SET_NEAREST_TOURNAMENT,\n    payload: IEvent,\n}\n\nexport type CalendarAction = setEventsAction | setIsLoadingAction | setNearestTournamentAction\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store\";\n\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector","import axios, {AxiosResponse} from \"axios\";\nimport {CalendarResponse} from \"../models/APIModels\";\n\nconst instance = axios.create({\n    //baseURL: 'http://127.0.0.1:8000/api/',\n    baseURL: 'https://xn--90aa5bhn.xn--p1ai/api/',\n})\n\nexport class CalendarService {\n    static async getEvents(): Promise<AxiosResponse<CalendarResponse>> {\n        return instance.get<CalendarResponse>('calendar/')\n    }\n}\n","import {IEvent} from \"../../../models/eventModel\";\nimport {CalendarAction, CalendarActionsEnum} from \"./types\";\nimport {AppDispatch} from \"../../index\";\nimport {CalendarService} from \"../../../api/CalendarService\";\n\nexport const CalendarActionCreators = {\n    setEvents: (events: IEvent[]): CalendarAction => ({type: CalendarActionsEnum.SET_EVENTS, payload: events}),\n    setIsLoading: (isLoading: boolean): CalendarAction => ({\n        type: CalendarActionsEnum.SET_IS_LOADING,\n        payload: isLoading\n    }),\n    setNearestTournament: (event: IEvent): CalendarAction => ({\n        type: CalendarActionsEnum.SET_NEAREST_TOURNAMENT,\n        payload: event,\n    }),\n    fetchEvents: () => async (dispatch: AppDispatch) => {\n        try {\n            dispatch(CalendarActionCreators.setIsLoading(true))\n            const response = await CalendarService.getEvents()\n            const events = response.data.events\n            dispatch(CalendarActionCreators.setEvents(events))\n            if (response.data.nearest_tournament) {\n                dispatch(CalendarActionCreators.setNearestTournament(response.data.nearest_tournament))\n            }\n            dispatch(CalendarActionCreators.setIsLoading(false))\n\n        } catch (e) {\n            console.error(e)\n        }\n    }\n}\n","import {CalendarActionCreators} from \"./calendar/calendarActionCreators\";\n\n\nexport const AllActionsCreators = {\n    ...CalendarActionCreators\n}\n","import React, {FC, useEffect, useState} from 'react';\nimport {Row, Calendar, Modal, Button, Descriptions, Spin, Alert} from \"antd\";\nimport {Moment} from \"moment\";\nimport {formatDate} from \"../utls/formatDate\";\nimport {useTypeSelector} from \"../hooks/useTypeSelector\";\nimport {IEvent} from \"../models/eventModel\";\nimport {useActions} from \"../hooks/useActions\";\n\nconst EventCalendar: FC = () => {\n    const {events, isLoading, nearestTournament} = useTypeSelector(state => state.calendar);\n    const [isVisible, setIsVisible] = useState(false);\n    const [chosenEvent, setChosenEvent] = useState({} as IEvent | undefined);\n    const {fetchEvents} = useActions();\n\n    useEffect(() => {\n        fetchEvents()\n    }, []);\n\n    const showModal = (e: React.MouseEvent<HTMLDivElement>) => {\n        const id = e.currentTarget.getAttribute('data-id')!;\n        const event = events.find(item => item.id === +id);\n        setChosenEvent(event);\n        setIsVisible(true);\n    };\n\n    const handleOk = () => {\n        setIsVisible(false);\n    };\n\n    const handleCancel = () => {\n        setIsVisible(false);\n    };\n\n    function dateCellRender(value: Moment) {\n        const formatedDate = formatDate(value.toDate());\n        const currentDayEvents = events.filter(item => item.date_start === formatedDate);\n        if (currentDayEvents.length > 0) {\n            return (\n                <div onClick={e => showModal(e)}\n                     data-id={currentDayEvents[0].id}\n                     className='ant-picker-calendar-date-content-custom'\n                ></div>);\n        }\n        return <></>;\n    }\n\n    return (\n        <>{isLoading ?\n            <div className=\"example\">\n                <Spin/>\n            </div> :\n            <>\n                {nearestTournament &&\n                <Alert\n                    message=\"Ближайщий турнир\"\n                    description={`${nearestTournament.competition} дата: ${nearestTournament.date_start}`}\n                    type=\"info\"\n                />}\n\n                <Calendar fullscreen={false} dateCellRender={dateCellRender}/>\n\n                <Modal title={chosenEvent?.competition} footer={null} visible={isVisible} onOk={handleOk}\n                       onCancel={handleCancel}>\n                    <Descriptions column={1}>\n                        <Descriptions.Item label=\"Город\">{chosenEvent?.city}</Descriptions.Item>\n                        {chosenEvent?.status &&\n                        <Descriptions.Item label=\"Статус соревнований\">{chosenEvent.status}</Descriptions.Item>\n                        }\n                        <Descriptions.Item label=\"Дата начала\">{chosenEvent?.date_start}</Descriptions.Item>\n                        <Descriptions.Item label=\"Дата окончания\">{chosenEvent?.date_finish}</Descriptions.Item>\n                        {chosenEvent?.regulation && <Descriptions.Item label=\"Регламент\">\n                            <a target='_blank' href={chosenEvent.regulation}>Регламент</a>\n                        </Descriptions.Item>\n                        }\n                    </Descriptions>\n                    <Row justify='end'>\n                        <Button onClick={handleOk} type=\"primary\">Ok</Button>\n                    </Row>\n                </Modal>\n            </>\n        }\n        </>\n    );\n};\n\nexport default EventCalendar;","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport {AllActionsCreators} from \"../store/reducers/AllActionsCreators\";\n\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(AllActionsCreators, dispatch)\n}\n","\n\nexport const formatDate = (date: Date): string => {\n    const year = date.getFullYear()\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\n    return `${day}.${month}.${year}`\n}\n","import React, {FC} from 'react';\nimport './App.css';\nimport EventCalendar from \"./pages/eventCalendar\";\nimport {Layout} from \"antd\";\n\nconst App: FC = () => {\n  return (\n    <Layout>\n        <Layout.Content>\n            <EventCalendar />\n        </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","import {CalendarAction, CalendarActionsEnum, CalendarState} from \"./types\";\n\nconst initialState: CalendarState = {\n    events: [],\n    isLoading: false\n}\n\nexport default function (state = initialState, action: CalendarAction): CalendarState {\n    switch (action.type) {\n        case CalendarActionsEnum.SET_EVENTS:\n            return {...state, events: action.payload}\n        case CalendarActionsEnum.SET_IS_LOADING:\n            return {...state, isLoading: action.payload}\n        case CalendarActionsEnum.SET_NEAREST_TOURNAMENT:\n            return {...state, nearestTournament: action.payload}\n        default:\n            return state\n    }\n}\n","import calendar from './calendar'\n\nexport default {\n    calendar,\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\n\n\nconst rootReducer = combineReducers(reducers)\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type  AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}